//******************************************************************************
// <copyright file="license.md" company="RawCMS project  (https://github.com/arduosoft/RawCMS)">
// Copyright (c) 2019 RawCMS project  (https://github.com/arduosoft/RawCMS)
// RawCMS project is released under GPL3 terms, see LICENSE file on repository root at  https://github.com/arduosoft/RawCMS .
// </copyright>
// <author>Daniele Fontani, Emanuele Bucarelli, Francesco Min�</author>
// <autogenerated>true</autogenerated>
//******************************************************************************
using GraphiQl;
using GraphQL;
using GraphQL.Http;
using GraphQL.Types;
using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using RawCMS.Library.Core;
using RawCMS.Library.Core.Interfaces;
using RawCMS.Library.Service;
using RawCMS.Plugins.GraphQL.Classes;

namespace RawCMS.Plugins.GraphQL
{
    public class GraphQLPlugin : RawCMS.Library.Core.Extension.Plugin, IConfigurablePlugin<GraphQLSettings>
    {
        public override string Name => "GraphQL";

        public override string Description => "Add GraphQL CMS capabilities";

        public override void Init()
        {
            Logger.LogInformation("GraphQL plugin loaded");
        }

        private GraphQLService graphService = new GraphQLService();

        public override void ConfigureServices(IServiceCollection services)
        {
            base.ConfigureServices(services);

            services.AddSingleton<IDependencyResolver>(s => new FuncDependencyResolver(s.GetRequiredService));
            services.AddSingleton<IDocumentExecuter, DocumentExecuter>();
            services.AddSingleton<IDocumentWriter, DocumentWriter>();
            //services.AddSingleton<ICollectionMetadata, CollectionMetadataService>();
            services.AddScoped<ISchema, GraphQLSchema>();
            services.AddSingleton<GraphQLQuery>();
            //services.AddSingleton<GraphQLService>();
            services.AddSingleton(x => graphService);
        }

        private AppEngine appEngine;

        public override void Configure(IApplicationBuilder app, AppEngine appEngine)
        {
            this.appEngine = appEngine;
            graphService.SetCRUDService(this.appEngine.Service);
            graphService.SetLogger(this.appEngine.GetLogger(this));
            graphService.SetSettings(config);
            graphService.SetAppEngine(appEngine);

            base.Configure(app, appEngine);

            app.UseMiddleware<GraphQLMiddleware>();
            //app.UseMiddleware<GraphQLMiddleware>(new GraphQLSettings
            //{
            //    BuildUserContext = ctx => new GraphQLUserContext
            //    {
            //        User = ctx.User
            //    },
            //    EnableMetrics = this.config.EnableMetrics
            //});

            app.UseGraphiQl(config.GraphiQLPath, config.Path);
        }

        private IConfigurationRoot configuration;

        public override void Setup(IConfigurationRoot configuration)
        {
            base.Setup(configuration);
            this.configuration = configuration;
        }

        public GraphQLSettings GetDefaultConfig()
        {
            return new GraphQLSettings
            {
                Path = "/api/graphql",
                EnableMetrics = false,
                GraphiQLPath = "/graphql"
            };
        }

        private GraphQLSettings config;

        public void SetActualConfig(GraphQLSettings config)
        {
            this.config = config;
        }
    }
}